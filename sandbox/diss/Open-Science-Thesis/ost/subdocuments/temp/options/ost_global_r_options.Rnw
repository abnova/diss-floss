%%%-------------------------------------------------%%%
%%% Sub document global preferences for Knitr %%%
%%%-------------------------------------------------%%%

<<ost_global_r_options, tidy=FALSE, highlight=FALSE, include=FALSE, cache=FALSE, eval=TRUE>>=  
  ## Load packages 

  suppressPackageStartupMessages(library(ggplot2)) 
  suppressPackageStartupMessages(library(plyr))
  suppressPackageStartupMessages(library(rgbif))

  ## Knitr 

  # messages 
  opts_chunk$set(warning=FALSE)
  # code evaluation 
  opts_chunk$set(eval=TRUE)
  # code decoration
  opts_chunk$set(tidy=TRUE, prompt=TRUE, comment='##', highlight=TRUE, size='normalsize')
  # cache options
  opts_chunk$set(cache.path='usr/cache/')  
  # Caching on by default
  opts_chunk$set(cache=T)
  # plot options 
  if("tikzDevice" %in% rownames(installed.packages()) == TRUE) {
	 opts_chunk$set(fig.path='usr/graphics/dynamic/', dev='tikz', fig.keep='high', fig.show='hold')  
  } else {
	 opts_chunk$set(fig.path='usr/graphics/dynamic/', dev='pdf', fig.keep='high', fig.show='hold')  
  }

  # tune details of graphics appearance 
  knit_hooks$set(par=function(before, options, envir){
    if (before && options$fig.show!='none') par(mar=c(4,4,.1,.1),cex.lab=.95,cex.axis=.9,mgp=c(2,.7,0),tcl=-.3)
    }
  )  
  
  # escape latex if in line code chunk
  hook_inline = knit_hooks$get('inline')
  knit_hooks$set(inline = function(x) {
    if (is.character(x)) x = knitr:::escape_latex(x)
    hook_inline(x)
  }) 

  # pdf.options(family = "Times", width=15)
  # tikz options
  options(replace.assign=TRUE, width=60)
  options(tikzSanitizeCharacters = c('%','$','}','{','^', '_'))
  options(tikzReplacementCharacters = c('\\%','\\$','\\}','\\{','\\^{}', '\\textunderscore')) 

  ## ggplot2  

  # Plot theme for ggplot2 (use with "+ theme_ost()") 
  theme_ost <- function(base_size = 10, base_family = "") {
    theme_grey(base_size = base_size, base_family = base_family) %+replace%
      theme(
	axis.text = element_text(size = rel(0.8)),
	axis.ticks = element_line(colour = "black"),
	legend.key = element_rect(colour = "grey80"),
	panel.background = element_rect(fill = "white", colour = NA),
	panel.border = element_rect(fill = NA, colour = "grey50"),
	panel.grid.major = element_blank(),
	panel.grid.minor = element_blank(),  
	strip.background = element_rect(fill = "grey80", colour = "grey50"),
	strip.background = element_rect(fill = "grey80", colour = "grey50")
      )
  }

  theme_ost_distmap <- function(base_size = 10, base_family = "") {
    theme_grey(base_size = base_size, base_family = base_family) %+replace%
      theme(
	axis.text = element_blank(),
	axis.ticks = element_blank(),
	legend.title = element_text(hjust = 20),
	legend.key = element_rect(colour = "grey80"),  
	panel.background = element_rect(fill = "white", colour = NA),
	panel.border = element_rect(fill = NA, colour = "grey50"),
	panel.grid.major = element_blank(),
	panel.grid.minor = element_blank(),  
	panel.border = element_blank(), 
	legend.key = element_blank(),
	strip.background = element_rect(fill = "grey80", colour = "grey50"),
	strip.background = element_rect(fill = "grey80", colour = "grey50")
      )
  }


  ## Helpers functions

  ost_load_or_install <- function(library=NULL){
    # todo: Implement a check if package is installed otherwise install it
  }

  ost_distmap <- function(species = NULL, kingdom = NULL){
    keys <- sapply(species, function(x) name_backbone(name=x, kingdom = kingdom)$speciesKey, USE.NAMES=FALSE)
    dat <- occ_search(taxonKey=keys, limit=100, return='data', georeferenced=TRUE)
    datdf <- ldply(dat)
    gbifmap(datdf)
  } 

@  




